PL/SQL (Procedural Language for SQL) is Oracleâ€™s extension of SQL that allows procedural programming like loops, conditions, and exception handling.

ðŸ”¸ Key Features
Block-structured: PL/SQL code is organized into blocks.

Tight integration with SQL.

Supports variables, constants, and control structures.

Exception handling.

Modular design (procedures, functions, packages).

DECLARE
   -- variable declarations
BEGIN
   -- executable statements (SQL/PLSQL)
EXCEPTION
   -- exception handling
END;

BEGIN
   DBMS_OUTPUT.PUT_LINE('Hello from PL/SQL!');
END;

DECLARE
   v_name VARCHAR2(20) := 'John';
   v_salary NUMBER := 50000;
BEGIN
   DBMS_OUTPUT.PUT_LINE('Name: ' || v_name);
   DBMS_OUTPUT.PUT_LINE('Salary: ' || v_salary);
END;


DECLARE
   v_marks NUMBER := 85;
BEGIN
   IF v_marks >= 90 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: A');
   ELSIF v_marks >= 75 THEN
      DBMS_OUTPUT.PUT_LINE('Grade: B');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Grade: C');
   END IF;
END;

DECLARE
   i NUMBER := 1;
BEGIN
   WHILE i <= 5 LOOP
      DBMS_OUTPUT.PUT_LINE('Count: ' || i);
      i := i + 1;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE greet_user(p_name IN VARCHAR2) IS
BEGIN
   DBMS_OUTPUT.PUT_LINE('Hello, ' || p_name);
END;

CREATE OR REPLACE FUNCTION add_numbers(a NUMBER, b NUMBER) RETURN NUMBER IS
BEGIN
   RETURN a + b;
END;

DECLARE
   CURSOR emp_cursor IS
      SELECT empno, ename FROM emp;
   v_empno emp.empno%TYPE;
   v_ename emp.ename%TYPE;
BEGIN
   OPEN emp_cursor;
   LOOP
      FETCH emp_cursor INTO v_empno, v_ename;
      EXIT WHEN emp_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(v_empno || ' - ' || v_ename);
   END LOOP;
   CLOSE emp_cursor;
END;

CREATE OR REPLACE TRIGGER before_insert_employee
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
   DBMS_OUTPUT.PUT_LINE('New employee being inserted: ' || :NEW.ename);
END;

DECLARE
   v_num NUMBER := 10;
   v_zero NUMBER := 0;
   v_result NUMBER;
BEGIN
   v_result := v_num / v_zero;
EXCEPTION
   WHEN ZERO_DIVIDE THEN
      DBMS_OUTPUT.PUT_LINE('Cannot divide by zero!');
END;

-- Package Spec
CREATE OR REPLACE PACKAGE math_pkg IS
   FUNCTION square(x NUMBER) RETURN NUMBER;
END math_pkg;

-- Package Body
CREATE OR REPLACE PACKAGE BODY math_pkg IS
   FUNCTION square(x NUMBER) RETURN NUMBER IS
   BEGIN
      RETURN x * x;
   END;
END math_pkg;
