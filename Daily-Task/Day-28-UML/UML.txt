UML Design Principles (SOLID)
Principle	Description	UML Representation
S: Single Responsibility	A class should have one reason to change	Separate classes for separate roles
O: Open/Closed	Open for extension, closed for modification	Use abstract classes/interfaces and inheritance
L: Liskov Substitution	Subclasses should replace base classes without breaking the app	Use generalization with proper behavior in subclasses
I: Interface Segregation	Many specific interfaces are better than one general-purpose interface	Show multiple interfaces in class diagram
D: Dependency Inversion	Depend on abstractions, not on concretions	Use interface dependency, represented as dotted arrows

âœ… UML Design Patterns (from GoF)
Design patterns are reusable solutions to common problems in software design. The Gang of Four (GoF) patterns are commonly represented using UML diagrams.

ðŸ”¶ Creational Design Patterns
Pattern	Purpose	UML Notation
Singleton	Ensure a class has only one instance	Class with private constructor and static method
Factory Method	Delegate instantiation to subclasses	Abstract class with method, subclasses override
Abstract Factory	Create families of related objects	Interface for object creation, multiple implementations
Builder	Separate object construction from its representation	Director class + Builder interface
Prototype	Clone existing objects instead of creating new	clone() method, shown as method in class

ðŸ§© Example: Factory Pattern UML
lua
Copy
Edit
                +--------------------+
                |   Product (interface)   |
                +--------------------+
                          â–²
                +--------------------+
                |  ConcreteProductA  |
                +--------------------+
                          â–²
                +--------------------+
                |  ConcreteProductB  |
                +--------------------+

                +--------------------+
                | Creator (abstract) |
                +--------------------+
                | +factoryMethod()   |
                +--------------------+
                          â–²
                +--------------------+
                | ConcreteCreatorA   |
                +--------------------+
ðŸ”· Structural Design Patterns
Pattern	Purpose	UML Highlights
Adapter	Convert interface of one class to another	Class connects 2 incompatible interfaces
Bridge	Separate abstraction from implementation	Composition relationship
Composite	Tree structure of objects	Component interface + Composite and Leaf classes
Decorator	Add responsibilities dynamically	Uses composition and interfaces
Facade	Provide a simplified interface	One class delegates to complex subsystems
Proxy	Control access to an object	Proxy and real subject implement same interface

ðŸ§© Example: Decorator Pattern UML
lua
Copy
Edit
       +----------------+
       |   Component    |
       +----------------+
       | +operation()   |
       +----------------+
              â–²
      --------------------
      |                  |
+-----------+      +----------------+
| Concrete  |      | Decorator      |
| Component |      +----------------+
+-----------+      | -component: C  |
                   | +operation()   |
                   +----------------+
                          â–²
                  +---------------+
                  | DecoratorImpl |
                  +---------------+
ðŸ”· Behavioral Design Patterns
Pattern	Purpose	UML Highlight
Observer	One-to-many dependency	Subject notifies all observers
Strategy	Define a family of algorithms	Context uses Strategy interface
State	Change behavior based on state	Context delegates to state object
Command	Encapsulate request as object	Invoker, Command, Receiver
Template Method	Define steps of algorithm in base class	Abstract class with abstract steps

ðŸ§© Example: Observer Pattern UML
pgsql
Copy
Edit
           +-------------+
           |   Subject   |
           +-------------+
           | +attach()   |
           | +detach()   |
           | +notify()   |
           +-------------+
                  â–²
           +-------------+
           | ConcreteSubject |
           +-------------+

     +-------------+        +-------------+
     |  Observer   |        | Observer    |
     +-------------+        +-------------+
     | +update()   |        | +update()   |
     +-------------+        +-------------+
           â–²                      â–²
     +-------------+        +-------------+
     | ObserverA   |        | ObserverB   |
     +-------------+        +-------------+
âœ… Summary Table of UML Patterns
Type	Example Patterns	UML Elements
Creational	Singleton, Factory, Builder	Class, Abstract Class
Structural	Adapter, Composite, Facade	Interface, Composition
Behavioral	Observer, Strategy, State	Interface, Association

ðŸ“Œ Tools to Draw UML:
Draw.io

Lucidchart

StarUML

PlantUML (code-based UML)

Visual Paradigm

 Use Case Diagram
ðŸ“Œ Purpose:
Describes what the system does from a user's perspective (functional requirements).

ðŸ“¦ Elements:
Actors: External entities (users, systems).

Use Cases: System functionalities.

System Boundary: Encloses use cases.

Associations: Lines connecting actors to use cases.

ðŸ§© Example: Library Management System
Use Case Diagram
sql
Copy
Edit
          +------------------------------+
          |  Library Management System   |
          |------------------------------|
          |  o Search Book               |
          |  o Borrow Book               |
          |  o Return Book               |
          |  o Register Member           |
          +------------------------------+
            ^           ^          ^
            |           |          |
       +--------+   +--------+  +--------+
       | Student|   |Faculty |  |Librarian|
       +--------+   +--------+  +--------+
âœ… 2. Class Diagram
ðŸ“Œ Purpose:
Describes the static structure: classes, attributes, methods, and relationships.

ðŸ“¦ Elements:
Class: Rectangle with name, attributes, methods.

Associations: Relationships (1:1, 1:N, etc.)

Inheritance, Aggregation, Composition

ðŸ§© Example: Library System Class Diagram
pgsql
Copy
Edit
+--------------------+
|     Book           |
+--------------------+
| -bookId: int       |
| -title: String     |
| -author: String    |
+--------------------+
| +getDetails()      |
+--------------------+

        â–²
        |
+---------------------+
|     LibraryItem     | <<abstract>>
+---------------------+
| -location: String   |
+---------------------+
| +checkout()         |
+---------------------+

+--------------------+         +--------------------+
|     User           |<>-------|     Book           |
+--------------------+         +--------------------+
| -userId: int       |         | -bookId            |
| -name: String      |         | -title             |
+--------------------+         | -author            |
| +borrowBook()      |         +--------------------+

        â–²
  ---------------
  |             |
+--------+   +-----------+
|Student |   | Faculty   |
+--------+   +-----------+
âœ… 3. Sequence Diagram
ðŸ“Œ Purpose:
Shows interaction between objects over time, useful for visualizing a use case scenario.

ðŸ“¦ Elements:
Actors & Objects (horizontal axis)

Messages (vertical arrows)

Lifelines and Activations

ðŸ§© Example: "Borrow Book" Sequence
lua
Copy
Edit
Student       LibrarySystem       BookDB
   |                 |               |
   |---borrowBook()-->               |
   |                 |               |
   |         validateUser()          |
   |                 |-------------->|
   |                 |  checkAvailability()  |
   |                 |<--------------|
   |                 |    issueBook()       |
   |<----------------|               |
âœ… Summary
Diagram	Purpose	Focus
Use Case	Functional requirements	Users and their interactions
Class	Static structure	Classes and relationships
Sequence	Dynamic interaction (per use case)	Time-based message exchange

